name: post-artifact
description: |
  Creates a post in the PR linking to an artifact.
inputs:
  artifact-id:
    description: The id of the artifact.
    required: true
  artifact-name:
    description: Message to include
    required: false
    default: 'artifact'
runs:
  using: 'composite'
  steps:

    - name: Compose message
      id: compose
      run: |
        echo -n "Thank you for your contribution @${{ github.actor }}"> _msg-${{ github.sha }}.txt
        echo -n ":rocket:! Your ${{ inputs.artifact-name }} is ready ">>_msg-${{ github.sha }}.txt
        echo -n "for download :point_right: [here](" >> _msg-${{ github.sha }}.txt
        echo -n "https://github.com/${{ github.repository }}/actions/">>_msg-${{ github.sha }}.txt
        echo -n "runs/${{ github.run_id }}/artifacts/" >> _msg-${{ github.sha }}.txt 
        echo -n "${{ inputs.artifact-id }}) :point_left:!" >> _msg-${{ github.sha }}.txt
      shell: bash
        
    - name: Get the event
      run: |
        gh pr view -R ${{ github.repository }} \
          ${{ github.event.number }} -c --json comments > \
          _events-${{ github.sha }}.json
      shell: bash

    - name: Get comment preview
      run: |
        import os
        import json

        def main(json_comments) -> str:

            # Open the JSON file and load its contents into a Python object
            with open(json_comments, 'r') as file:
                data = json.load(file)

            print(data)

            if (data['comments'] == []):
                return ''

            # Now you can work with the 'data' object
            for i in range(len(data['comments'])):
                body = data['comments'][i]['body']
                auth = data['comments'][i]['author']['login']
                id   = data['comments'][i]['id']

                # Regex match to the body of the comment looking
                # for the expression "Thank you for your contribution"
                # if found, print the author and the body of the comment
                if "Your preview" in body and auth == 'github-actions':
                    return id

            return ''
        with (open('_PR_COMMENT_ID-${{ github.sha }}', 'w')) as file:
            file.write(main('_events-${{ github.sha }}.json'))

      shell: python {0}

    - name: Putting the contents of _msg.txt into an environment var
      id: set-env
      run: |
        echo "MSG=$(cat _msg-${{ github.sha }}.txt)" >> $GITHUB_OUTPUT
        echo "ID=$(cat _PR_COMMENT_ID-${{ github.sha }})" >> $GITHUB_OUTPUT
      shell: bash

    - name: Post comment preview
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          repos/${{ github.repository}}/pulls/${{ github.event.number }} \
          -f query='
          mutation UpdateIssueComment {
            updateIssueComment(input: {
              id: "${{ steps.set-env.outputs.ID }}",
              body: "${{ steps.set-env.outputs.MSG }}"
            }) {
              issueComment {
                id
                body
              }
            }
          }
          '
      shell: bash
