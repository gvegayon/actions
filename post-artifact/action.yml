name: post-artifact
description: |
  Creates a post in the PR linking to an artifact.
  Subsequent runs will update the comment.
inputs:
  artifact-name:
    description: Artifact name
    required: false
    default: 'artifact'
  message:
    description: |
      Message template to be posted in the PR. The message should include
      the following placeholders: { actor }, { artifact-name },
      and { artifact-url }. The { actor } placeholder will be replaced by
      the actor's username. The { artifact-name } will be replaced by the
      artifact name. The { artifact-url } will be replaced by the URL to
      the artifact.
    required: false
    default: 'Thank you for your contribution { actor } :rocket:! Your { artifact-name } is ready for download :point_right: [here]({ artifact-url }) :point_left:!'
  python:
    description: |
      The path to the Python executable. This input is optional and
      defaults to 'python'.
    required: false
    default: 'python'
  gh-token:
    description: |
      The GitHub token to use for the API calls. 
    required: true
runs:
  using: 'composite'

  steps:

    - name: List artifacts
      run: |
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts > _artifacts-${{ github.sha }}.json
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Id artifact
      run: |
        import re
        import json

        def find_artifact() -> str:
            fn = '_artifacts-${{ github.sha }}.json'
            with open(fn, 'r') as file:
                data = json.load(file)

            artifacts = data.get('artifacts')

            for i in range(len(artifacts)):

                print(f"Artifact: {artifacts[i]}")

                name = artifacts[i].get('name')
                id = artifacts[i].get('id')

                if not name:
                    continue

                if not id:
                    continue

                if '${{ inputs.artifact-name }}' == name:
                    return str(id)
            return ''

        id = find_artifact()

        with open('${{ github.sha }}_artifact_id', 'w') as file:
            file.write(id)
      shell: ${{ inputs.python }} "{0}"

    - name: Get artifact id
      id: artifact-id
      run: |
        echo "VALUE=$(cat '${{ github.sha }}_artifact_id')" \
          >> $GITHUB_OUTPUT
      shell: bash

    - name: Check if artifact was found
      run: |
        if [ -z "${{ steps.artifact-id.outputs.ARTIFACT_ID }}" ]; then
            echo "Artifact not found."
            exit 1
        fi
      shell: bash

    - name: Compose message
      run: |
        import re

        msg = "[]("+ re.sub(r'\s+', '_', '${{ inputs.artifact-name }}')+")"
        msg = msg + "${{ inputs.message }}"
        
        updated = re.sub(
          r'{ artifact-name }', '${{ inputs.artifact-name }}', msg
          )
        
        updated = re.sub(
          r'{ actor }', '@${{ github.actor }}', updated
          )
        
        updated = re.sub(
          r'{ artifact-url }',
          '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-id.outputs.VALUE }}',
          updated
          )
        
        with open('msg-${{ github.sha }}.txt', 'w') as file:
            file.write(updated)
      shell: ${{ inputs.python }} {0}
        
    - name: Get the event
      run: |
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/issues/${{ github.event.number }}/comments > _events-${{ github.sha }}.json
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Get comment preview
      run: |
        import json
        import re

        def main(json_comments) -> str:

            # Open the JSON file and load its contents into a Python object
            with open(json_comments, 'r') as file:
                data = json.load(file)

            if (data == []):
                return ''

            matching_msg = re.escape(
                "[](" + re.sub(r'\s+', '_', '${{ inputs.artifact-name }}')+")"
                )

            # Now you can work with the 'data' object
            for i in range(len(data)):

                body = data[i].get('body')
                auth = data[i].get('user').get('login')
                url =  data[i].get('url')

                if not url:
                    continue

                if not auth:
                    continue

                if not body:
                    continue
                    
                match = re.search(r'\d+$', url)

                if not match:
                    continue

                id = match.group()

                # Regex match to the body of the comment looking
                # for the expression "Thank you for your contribution"
                # if found, print the author and the body of the comment
                if (re.search(matching_msg, body)) and (re.match(r'^github-actions\[bot\]', auth)):
                    return id

            return ''

        id = main('_events-${{ github.sha }}.json')
        fn = '_ID-${{ github.sha }}'
        with (open(fn, 'w')) as file:
            file.write(id)

        with (open(fn+'_found', 'w')) as file:
            if id == '':
                file.write('false')
            else:
                file.write('true')

      shell: ${{ inputs.python }} {0}

    - name: Putting the contents of _msg.txt into an environment var
      id: set-env
      run: |
        echo "MSG=$(cat msg-${{ github.sha }}.txt)" >> $GITHUB_OUTPUT
        echo "ID=$(cat _ID-${{ github.sha }})" >> $GITHUB_OUTPUT
        echo "FOUND=$(cat _ID-${{ github.sha }}_found)" >> $GITHUB_OUTPUT
      shell: bash

    # See:
    # https://docs.github.com/en/rest/issues/comments?apiVersion=2022-11-28#update-an-issue-comment
    - name: Add comment
      if: ${{ github.event_name == 'pull_request' && steps.set-env.outputs.FOUND == 'false' }}
      run: |
        echo "No comment from github-bot found, adding a new one."
        gh pr comment -R ${{ github.repository }} \
          ${{ github.event.number }} -b "${{ steps.set-env.outputs.MSG }}"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
    
    - name: Update comment
      if: ${{ github.event_name == 'pull_request' && steps.set-env.outputs.FOUND == 'true' }}
      run: |
        echo "Editing original comment id: ${{ steps.set-env.outputs.ID }}."
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/issues/comments/${{ steps.set-env.outputs.ID }} \
          -f "body=${{ steps.set-env.outputs.MSG }}"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}